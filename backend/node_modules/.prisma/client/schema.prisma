// Prisma schema for Skill Swap Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  location       String?
  photoUrl       String?
  isAdmin        Boolean        @default(false)
  isBanned       Boolean        @default(false)
  isPublic       Boolean        @default(true)
  availability   String?
  skillsOffered  SkillOffered[]
  skillsWanted   SkillWanted[]
  swapsRequested Swap[]         @relation("RequestedSwaps")
  swapsReceived  Swap[]         @relation("ReceivedSwaps")
  feedbacks      Feedback[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model SkillOffered {
  id     Int    @id @default(autoincrement())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model SkillWanted {
  id     Int    @id @default(autoincrement())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Swap {
  id            Int       @id @default(autoincrement())
  requester     User      @relation("RequestedSwaps", fields: [requesterId], references: [id])
  requesterId   Int
  receiver      User      @relation("ReceivedSwaps", fields: [receiverId], references: [id])
  receiverId    Int
  skillsOffered String
  skillsWanted  String
  status        String // pending, accepted, rejected, deleted
  message       String?
  feedback      Feedback?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  swap      Swap     @relation(fields: [swapId], references: [id])
  swapId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
