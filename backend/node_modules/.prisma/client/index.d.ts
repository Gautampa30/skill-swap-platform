
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SkillOffered
 * 
 */
export type SkillOffered = $Result.DefaultSelection<Prisma.$SkillOfferedPayload>
/**
 * Model SkillWanted
 * 
 */
export type SkillWanted = $Result.DefaultSelection<Prisma.$SkillWantedPayload>
/**
 * Model Swap
 * 
 */
export type Swap = $Result.DefaultSelection<Prisma.$SwapPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.skillOffered`: Exposes CRUD operations for the **SkillOffered** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillOffereds
    * const skillOffereds = await prisma.skillOffered.findMany()
    * ```
    */
  get skillOffered(): Prisma.SkillOfferedDelegate<ExtArgs>;

  /**
   * `prisma.skillWanted`: Exposes CRUD operations for the **SkillWanted** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillWanteds
    * const skillWanteds = await prisma.skillWanted.findMany()
    * ```
    */
  get skillWanted(): Prisma.SkillWantedDelegate<ExtArgs>;

  /**
   * `prisma.swap`: Exposes CRUD operations for the **Swap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Swaps
    * const swaps = await prisma.swap.findMany()
    * ```
    */
  get swap(): Prisma.SwapDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SkillOffered: 'SkillOffered',
    SkillWanted: 'SkillWanted',
    Swap: 'Swap',
    Feedback: 'Feedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "skillOffered" | "skillWanted" | "swap" | "feedback"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SkillOffered: {
        payload: Prisma.$SkillOfferedPayload<ExtArgs>
        fields: Prisma.SkillOfferedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillOfferedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillOfferedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          findFirst: {
            args: Prisma.SkillOfferedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillOfferedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          findMany: {
            args: Prisma.SkillOfferedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>[]
          }
          create: {
            args: Prisma.SkillOfferedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          createMany: {
            args: Prisma.SkillOfferedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillOfferedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>[]
          }
          delete: {
            args: Prisma.SkillOfferedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          update: {
            args: Prisma.SkillOfferedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          deleteMany: {
            args: Prisma.SkillOfferedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillOfferedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillOfferedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillOfferedPayload>
          }
          aggregate: {
            args: Prisma.SkillOfferedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillOffered>
          }
          groupBy: {
            args: Prisma.SkillOfferedGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillOfferedGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillOfferedCountArgs<ExtArgs>
            result: $Utils.Optional<SkillOfferedCountAggregateOutputType> | number
          }
        }
      }
      SkillWanted: {
        payload: Prisma.$SkillWantedPayload<ExtArgs>
        fields: Prisma.SkillWantedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillWantedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillWantedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          findFirst: {
            args: Prisma.SkillWantedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillWantedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          findMany: {
            args: Prisma.SkillWantedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>[]
          }
          create: {
            args: Prisma.SkillWantedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          createMany: {
            args: Prisma.SkillWantedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillWantedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>[]
          }
          delete: {
            args: Prisma.SkillWantedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          update: {
            args: Prisma.SkillWantedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          deleteMany: {
            args: Prisma.SkillWantedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillWantedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillWantedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillWantedPayload>
          }
          aggregate: {
            args: Prisma.SkillWantedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillWanted>
          }
          groupBy: {
            args: Prisma.SkillWantedGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillWantedGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillWantedCountArgs<ExtArgs>
            result: $Utils.Optional<SkillWantedCountAggregateOutputType> | number
          }
        }
      }
      Swap: {
        payload: Prisma.$SwapPayload<ExtArgs>
        fields: Prisma.SwapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SwapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          findFirst: {
            args: Prisma.SwapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          findMany: {
            args: Prisma.SwapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>[]
          }
          create: {
            args: Prisma.SwapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          createMany: {
            args: Prisma.SwapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SwapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>[]
          }
          delete: {
            args: Prisma.SwapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          update: {
            args: Prisma.SwapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          deleteMany: {
            args: Prisma.SwapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SwapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SwapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          aggregate: {
            args: Prisma.SwapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSwap>
          }
          groupBy: {
            args: Prisma.SwapGroupByArgs<ExtArgs>
            result: $Utils.Optional<SwapGroupByOutputType>[]
          }
          count: {
            args: Prisma.SwapCountArgs<ExtArgs>
            result: $Utils.Optional<SwapCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    skillsOffered: number
    skillsWanted: number
    swapsRequested: number
    swapsReceived: number
    feedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsOffered?: boolean | UserCountOutputTypeCountSkillsOfferedArgs
    skillsWanted?: boolean | UserCountOutputTypeCountSkillsWantedArgs
    swapsRequested?: boolean | UserCountOutputTypeCountSwapsRequestedArgs
    swapsReceived?: boolean | UserCountOutputTypeCountSwapsReceivedArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsOfferedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillOfferedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsWantedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWantedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSwapsRequestedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSwapsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    location: string | null
    photoUrl: string | null
    isAdmin: boolean | null
    isBanned: boolean | null
    isPublic: boolean | null
    availability: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    location: string | null
    photoUrl: string | null
    isAdmin: boolean | null
    isBanned: boolean | null
    isPublic: boolean | null
    availability: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    location: number
    photoUrl: number
    isAdmin: number
    isBanned: number
    isPublic: number
    availability: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    location?: true
    photoUrl?: true
    isAdmin?: true
    isBanned?: true
    isPublic?: true
    availability?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    location?: true
    photoUrl?: true
    isAdmin?: true
    isBanned?: true
    isPublic?: true
    availability?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    location?: true
    photoUrl?: true
    isAdmin?: true
    isBanned?: true
    isPublic?: true
    availability?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    location: string | null
    photoUrl: string | null
    isAdmin: boolean
    isBanned: boolean
    isPublic: boolean
    availability: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    location?: boolean
    photoUrl?: boolean
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    skillsOffered?: boolean | User$skillsOfferedArgs<ExtArgs>
    skillsWanted?: boolean | User$skillsWantedArgs<ExtArgs>
    swapsRequested?: boolean | User$swapsRequestedArgs<ExtArgs>
    swapsReceived?: boolean | User$swapsReceivedArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    location?: boolean
    photoUrl?: boolean
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    location?: boolean
    photoUrl?: boolean
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsOffered?: boolean | User$skillsOfferedArgs<ExtArgs>
    skillsWanted?: boolean | User$skillsWantedArgs<ExtArgs>
    swapsRequested?: boolean | User$swapsRequestedArgs<ExtArgs>
    swapsReceived?: boolean | User$swapsReceivedArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      skillsOffered: Prisma.$SkillOfferedPayload<ExtArgs>[]
      skillsWanted: Prisma.$SkillWantedPayload<ExtArgs>[]
      swapsRequested: Prisma.$SwapPayload<ExtArgs>[]
      swapsReceived: Prisma.$SwapPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      location: string | null
      photoUrl: string | null
      isAdmin: boolean
      isBanned: boolean
      isPublic: boolean
      availability: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skillsOffered<T extends User$skillsOfferedArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsOfferedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findMany"> | Null>
    skillsWanted<T extends User$skillsWantedArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsWantedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findMany"> | Null>
    swapsRequested<T extends User$swapsRequestedArgs<ExtArgs> = {}>(args?: Subset<T, User$swapsRequestedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findMany"> | Null>
    swapsReceived<T extends User$swapsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$swapsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findMany"> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly photoUrl: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
    readonly isPublic: FieldRef<"User", 'Boolean'>
    readonly availability: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.skillsOffered
   */
  export type User$skillsOfferedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    where?: SkillOfferedWhereInput
    orderBy?: SkillOfferedOrderByWithRelationInput | SkillOfferedOrderByWithRelationInput[]
    cursor?: SkillOfferedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillOfferedScalarFieldEnum | SkillOfferedScalarFieldEnum[]
  }

  /**
   * User.skillsWanted
   */
  export type User$skillsWantedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    where?: SkillWantedWhereInput
    orderBy?: SkillWantedOrderByWithRelationInput | SkillWantedOrderByWithRelationInput[]
    cursor?: SkillWantedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillWantedScalarFieldEnum | SkillWantedScalarFieldEnum[]
  }

  /**
   * User.swapsRequested
   */
  export type User$swapsRequestedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    where?: SwapWhereInput
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    cursor?: SwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * User.swapsReceived
   */
  export type User$swapsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    where?: SwapWhereInput
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    cursor?: SwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SkillOffered
   */

  export type AggregateSkillOffered = {
    _count: SkillOfferedCountAggregateOutputType | null
    _avg: SkillOfferedAvgAggregateOutputType | null
    _sum: SkillOfferedSumAggregateOutputType | null
    _min: SkillOfferedMinAggregateOutputType | null
    _max: SkillOfferedMaxAggregateOutputType | null
  }

  export type SkillOfferedAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SkillOfferedSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SkillOfferedMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type SkillOfferedMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type SkillOfferedCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type SkillOfferedAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SkillOfferedSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SkillOfferedMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type SkillOfferedMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type SkillOfferedCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type SkillOfferedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillOffered to aggregate.
     */
    where?: SkillOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillOffereds to fetch.
     */
    orderBy?: SkillOfferedOrderByWithRelationInput | SkillOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillOffereds
    **/
    _count?: true | SkillOfferedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillOfferedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillOfferedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillOfferedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillOfferedMaxAggregateInputType
  }

  export type GetSkillOfferedAggregateType<T extends SkillOfferedAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillOffered]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillOffered[P]>
      : GetScalarType<T[P], AggregateSkillOffered[P]>
  }




  export type SkillOfferedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillOfferedWhereInput
    orderBy?: SkillOfferedOrderByWithAggregationInput | SkillOfferedOrderByWithAggregationInput[]
    by: SkillOfferedScalarFieldEnum[] | SkillOfferedScalarFieldEnum
    having?: SkillOfferedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillOfferedCountAggregateInputType | true
    _avg?: SkillOfferedAvgAggregateInputType
    _sum?: SkillOfferedSumAggregateInputType
    _min?: SkillOfferedMinAggregateInputType
    _max?: SkillOfferedMaxAggregateInputType
  }

  export type SkillOfferedGroupByOutputType = {
    id: number
    name: string
    userId: number
    _count: SkillOfferedCountAggregateOutputType | null
    _avg: SkillOfferedAvgAggregateOutputType | null
    _sum: SkillOfferedSumAggregateOutputType | null
    _min: SkillOfferedMinAggregateOutputType | null
    _max: SkillOfferedMaxAggregateOutputType | null
  }

  type GetSkillOfferedGroupByPayload<T extends SkillOfferedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillOfferedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillOfferedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillOfferedGroupByOutputType[P]>
            : GetScalarType<T[P], SkillOfferedGroupByOutputType[P]>
        }
      >
    >


  export type SkillOfferedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillOffered"]>

  export type SkillOfferedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillOffered"]>

  export type SkillOfferedSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
  }

  export type SkillOfferedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SkillOfferedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SkillOfferedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillOffered"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number
    }, ExtArgs["result"]["skillOffered"]>
    composites: {}
  }

  type SkillOfferedGetPayload<S extends boolean | null | undefined | SkillOfferedDefaultArgs> = $Result.GetResult<Prisma.$SkillOfferedPayload, S>

  type SkillOfferedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillOfferedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillOfferedCountAggregateInputType | true
    }

  export interface SkillOfferedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillOffered'], meta: { name: 'SkillOffered' } }
    /**
     * Find zero or one SkillOffered that matches the filter.
     * @param {SkillOfferedFindUniqueArgs} args - Arguments to find a SkillOffered
     * @example
     * // Get one SkillOffered
     * const skillOffered = await prisma.skillOffered.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillOfferedFindUniqueArgs>(args: SelectSubset<T, SkillOfferedFindUniqueArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SkillOffered that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillOfferedFindUniqueOrThrowArgs} args - Arguments to find a SkillOffered
     * @example
     * // Get one SkillOffered
     * const skillOffered = await prisma.skillOffered.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillOfferedFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillOfferedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SkillOffered that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedFindFirstArgs} args - Arguments to find a SkillOffered
     * @example
     * // Get one SkillOffered
     * const skillOffered = await prisma.skillOffered.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillOfferedFindFirstArgs>(args?: SelectSubset<T, SkillOfferedFindFirstArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SkillOffered that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedFindFirstOrThrowArgs} args - Arguments to find a SkillOffered
     * @example
     * // Get one SkillOffered
     * const skillOffered = await prisma.skillOffered.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillOfferedFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillOfferedFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SkillOffereds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillOffereds
     * const skillOffereds = await prisma.skillOffered.findMany()
     * 
     * // Get first 10 SkillOffereds
     * const skillOffereds = await prisma.skillOffered.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillOfferedWithIdOnly = await prisma.skillOffered.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillOfferedFindManyArgs>(args?: SelectSubset<T, SkillOfferedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SkillOffered.
     * @param {SkillOfferedCreateArgs} args - Arguments to create a SkillOffered.
     * @example
     * // Create one SkillOffered
     * const SkillOffered = await prisma.skillOffered.create({
     *   data: {
     *     // ... data to create a SkillOffered
     *   }
     * })
     * 
     */
    create<T extends SkillOfferedCreateArgs>(args: SelectSubset<T, SkillOfferedCreateArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SkillOffereds.
     * @param {SkillOfferedCreateManyArgs} args - Arguments to create many SkillOffereds.
     * @example
     * // Create many SkillOffereds
     * const skillOffered = await prisma.skillOffered.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillOfferedCreateManyArgs>(args?: SelectSubset<T, SkillOfferedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillOffereds and returns the data saved in the database.
     * @param {SkillOfferedCreateManyAndReturnArgs} args - Arguments to create many SkillOffereds.
     * @example
     * // Create many SkillOffereds
     * const skillOffered = await prisma.skillOffered.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillOffereds and only return the `id`
     * const skillOfferedWithIdOnly = await prisma.skillOffered.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillOfferedCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillOfferedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SkillOffered.
     * @param {SkillOfferedDeleteArgs} args - Arguments to delete one SkillOffered.
     * @example
     * // Delete one SkillOffered
     * const SkillOffered = await prisma.skillOffered.delete({
     *   where: {
     *     // ... filter to delete one SkillOffered
     *   }
     * })
     * 
     */
    delete<T extends SkillOfferedDeleteArgs>(args: SelectSubset<T, SkillOfferedDeleteArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SkillOffered.
     * @param {SkillOfferedUpdateArgs} args - Arguments to update one SkillOffered.
     * @example
     * // Update one SkillOffered
     * const skillOffered = await prisma.skillOffered.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillOfferedUpdateArgs>(args: SelectSubset<T, SkillOfferedUpdateArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SkillOffereds.
     * @param {SkillOfferedDeleteManyArgs} args - Arguments to filter SkillOffereds to delete.
     * @example
     * // Delete a few SkillOffereds
     * const { count } = await prisma.skillOffered.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillOfferedDeleteManyArgs>(args?: SelectSubset<T, SkillOfferedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillOffereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillOffereds
     * const skillOffered = await prisma.skillOffered.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillOfferedUpdateManyArgs>(args: SelectSubset<T, SkillOfferedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SkillOffered.
     * @param {SkillOfferedUpsertArgs} args - Arguments to update or create a SkillOffered.
     * @example
     * // Update or create a SkillOffered
     * const skillOffered = await prisma.skillOffered.upsert({
     *   create: {
     *     // ... data to create a SkillOffered
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillOffered we want to update
     *   }
     * })
     */
    upsert<T extends SkillOfferedUpsertArgs>(args: SelectSubset<T, SkillOfferedUpsertArgs<ExtArgs>>): Prisma__SkillOfferedClient<$Result.GetResult<Prisma.$SkillOfferedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SkillOffereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedCountArgs} args - Arguments to filter SkillOffereds to count.
     * @example
     * // Count the number of SkillOffereds
     * const count = await prisma.skillOffered.count({
     *   where: {
     *     // ... the filter for the SkillOffereds we want to count
     *   }
     * })
    **/
    count<T extends SkillOfferedCountArgs>(
      args?: Subset<T, SkillOfferedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillOfferedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillOffered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillOfferedAggregateArgs>(args: Subset<T, SkillOfferedAggregateArgs>): Prisma.PrismaPromise<GetSkillOfferedAggregateType<T>>

    /**
     * Group by SkillOffered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillOfferedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillOfferedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillOfferedGroupByArgs['orderBy'] }
        : { orderBy?: SkillOfferedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillOfferedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillOfferedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillOffered model
   */
  readonly fields: SkillOfferedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillOffered.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillOfferedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillOffered model
   */ 
  interface SkillOfferedFieldRefs {
    readonly id: FieldRef<"SkillOffered", 'Int'>
    readonly name: FieldRef<"SkillOffered", 'String'>
    readonly userId: FieldRef<"SkillOffered", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SkillOffered findUnique
   */
  export type SkillOfferedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter, which SkillOffered to fetch.
     */
    where: SkillOfferedWhereUniqueInput
  }

  /**
   * SkillOffered findUniqueOrThrow
   */
  export type SkillOfferedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter, which SkillOffered to fetch.
     */
    where: SkillOfferedWhereUniqueInput
  }

  /**
   * SkillOffered findFirst
   */
  export type SkillOfferedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter, which SkillOffered to fetch.
     */
    where?: SkillOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillOffereds to fetch.
     */
    orderBy?: SkillOfferedOrderByWithRelationInput | SkillOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillOffereds.
     */
    cursor?: SkillOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillOffereds.
     */
    distinct?: SkillOfferedScalarFieldEnum | SkillOfferedScalarFieldEnum[]
  }

  /**
   * SkillOffered findFirstOrThrow
   */
  export type SkillOfferedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter, which SkillOffered to fetch.
     */
    where?: SkillOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillOffereds to fetch.
     */
    orderBy?: SkillOfferedOrderByWithRelationInput | SkillOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillOffereds.
     */
    cursor?: SkillOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillOffereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillOffereds.
     */
    distinct?: SkillOfferedScalarFieldEnum | SkillOfferedScalarFieldEnum[]
  }

  /**
   * SkillOffered findMany
   */
  export type SkillOfferedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter, which SkillOffereds to fetch.
     */
    where?: SkillOfferedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillOffereds to fetch.
     */
    orderBy?: SkillOfferedOrderByWithRelationInput | SkillOfferedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillOffereds.
     */
    cursor?: SkillOfferedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillOffereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillOffereds.
     */
    skip?: number
    distinct?: SkillOfferedScalarFieldEnum | SkillOfferedScalarFieldEnum[]
  }

  /**
   * SkillOffered create
   */
  export type SkillOfferedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillOffered.
     */
    data: XOR<SkillOfferedCreateInput, SkillOfferedUncheckedCreateInput>
  }

  /**
   * SkillOffered createMany
   */
  export type SkillOfferedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillOffereds.
     */
    data: SkillOfferedCreateManyInput | SkillOfferedCreateManyInput[]
  }

  /**
   * SkillOffered createManyAndReturn
   */
  export type SkillOfferedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SkillOffereds.
     */
    data: SkillOfferedCreateManyInput | SkillOfferedCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillOffered update
   */
  export type SkillOfferedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillOffered.
     */
    data: XOR<SkillOfferedUpdateInput, SkillOfferedUncheckedUpdateInput>
    /**
     * Choose, which SkillOffered to update.
     */
    where: SkillOfferedWhereUniqueInput
  }

  /**
   * SkillOffered updateMany
   */
  export type SkillOfferedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillOffereds.
     */
    data: XOR<SkillOfferedUpdateManyMutationInput, SkillOfferedUncheckedUpdateManyInput>
    /**
     * Filter which SkillOffereds to update
     */
    where?: SkillOfferedWhereInput
  }

  /**
   * SkillOffered upsert
   */
  export type SkillOfferedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillOffered to update in case it exists.
     */
    where: SkillOfferedWhereUniqueInput
    /**
     * In case the SkillOffered found by the `where` argument doesn't exist, create a new SkillOffered with this data.
     */
    create: XOR<SkillOfferedCreateInput, SkillOfferedUncheckedCreateInput>
    /**
     * In case the SkillOffered was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillOfferedUpdateInput, SkillOfferedUncheckedUpdateInput>
  }

  /**
   * SkillOffered delete
   */
  export type SkillOfferedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
    /**
     * Filter which SkillOffered to delete.
     */
    where: SkillOfferedWhereUniqueInput
  }

  /**
   * SkillOffered deleteMany
   */
  export type SkillOfferedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillOffereds to delete
     */
    where?: SkillOfferedWhereInput
  }

  /**
   * SkillOffered without action
   */
  export type SkillOfferedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillOffered
     */
    select?: SkillOfferedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillOfferedInclude<ExtArgs> | null
  }


  /**
   * Model SkillWanted
   */

  export type AggregateSkillWanted = {
    _count: SkillWantedCountAggregateOutputType | null
    _avg: SkillWantedAvgAggregateOutputType | null
    _sum: SkillWantedSumAggregateOutputType | null
    _min: SkillWantedMinAggregateOutputType | null
    _max: SkillWantedMaxAggregateOutputType | null
  }

  export type SkillWantedAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SkillWantedSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SkillWantedMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type SkillWantedMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type SkillWantedCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type SkillWantedAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SkillWantedSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SkillWantedMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type SkillWantedMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type SkillWantedCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type SkillWantedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillWanted to aggregate.
     */
    where?: SkillWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillWanteds to fetch.
     */
    orderBy?: SkillWantedOrderByWithRelationInput | SkillWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillWanteds
    **/
    _count?: true | SkillWantedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillWantedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillWantedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillWantedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillWantedMaxAggregateInputType
  }

  export type GetSkillWantedAggregateType<T extends SkillWantedAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillWanted]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillWanted[P]>
      : GetScalarType<T[P], AggregateSkillWanted[P]>
  }




  export type SkillWantedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWantedWhereInput
    orderBy?: SkillWantedOrderByWithAggregationInput | SkillWantedOrderByWithAggregationInput[]
    by: SkillWantedScalarFieldEnum[] | SkillWantedScalarFieldEnum
    having?: SkillWantedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillWantedCountAggregateInputType | true
    _avg?: SkillWantedAvgAggregateInputType
    _sum?: SkillWantedSumAggregateInputType
    _min?: SkillWantedMinAggregateInputType
    _max?: SkillWantedMaxAggregateInputType
  }

  export type SkillWantedGroupByOutputType = {
    id: number
    name: string
    userId: number
    _count: SkillWantedCountAggregateOutputType | null
    _avg: SkillWantedAvgAggregateOutputType | null
    _sum: SkillWantedSumAggregateOutputType | null
    _min: SkillWantedMinAggregateOutputType | null
    _max: SkillWantedMaxAggregateOutputType | null
  }

  type GetSkillWantedGroupByPayload<T extends SkillWantedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillWantedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillWantedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillWantedGroupByOutputType[P]>
            : GetScalarType<T[P], SkillWantedGroupByOutputType[P]>
        }
      >
    >


  export type SkillWantedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillWanted"]>

  export type SkillWantedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillWanted"]>

  export type SkillWantedSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
  }

  export type SkillWantedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SkillWantedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SkillWantedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillWanted"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number
    }, ExtArgs["result"]["skillWanted"]>
    composites: {}
  }

  type SkillWantedGetPayload<S extends boolean | null | undefined | SkillWantedDefaultArgs> = $Result.GetResult<Prisma.$SkillWantedPayload, S>

  type SkillWantedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillWantedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillWantedCountAggregateInputType | true
    }

  export interface SkillWantedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillWanted'], meta: { name: 'SkillWanted' } }
    /**
     * Find zero or one SkillWanted that matches the filter.
     * @param {SkillWantedFindUniqueArgs} args - Arguments to find a SkillWanted
     * @example
     * // Get one SkillWanted
     * const skillWanted = await prisma.skillWanted.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillWantedFindUniqueArgs>(args: SelectSubset<T, SkillWantedFindUniqueArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SkillWanted that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillWantedFindUniqueOrThrowArgs} args - Arguments to find a SkillWanted
     * @example
     * // Get one SkillWanted
     * const skillWanted = await prisma.skillWanted.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillWantedFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillWantedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SkillWanted that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedFindFirstArgs} args - Arguments to find a SkillWanted
     * @example
     * // Get one SkillWanted
     * const skillWanted = await prisma.skillWanted.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillWantedFindFirstArgs>(args?: SelectSubset<T, SkillWantedFindFirstArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SkillWanted that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedFindFirstOrThrowArgs} args - Arguments to find a SkillWanted
     * @example
     * // Get one SkillWanted
     * const skillWanted = await prisma.skillWanted.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillWantedFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillWantedFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SkillWanteds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillWanteds
     * const skillWanteds = await prisma.skillWanted.findMany()
     * 
     * // Get first 10 SkillWanteds
     * const skillWanteds = await prisma.skillWanted.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWantedWithIdOnly = await prisma.skillWanted.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillWantedFindManyArgs>(args?: SelectSubset<T, SkillWantedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SkillWanted.
     * @param {SkillWantedCreateArgs} args - Arguments to create a SkillWanted.
     * @example
     * // Create one SkillWanted
     * const SkillWanted = await prisma.skillWanted.create({
     *   data: {
     *     // ... data to create a SkillWanted
     *   }
     * })
     * 
     */
    create<T extends SkillWantedCreateArgs>(args: SelectSubset<T, SkillWantedCreateArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SkillWanteds.
     * @param {SkillWantedCreateManyArgs} args - Arguments to create many SkillWanteds.
     * @example
     * // Create many SkillWanteds
     * const skillWanted = await prisma.skillWanted.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillWantedCreateManyArgs>(args?: SelectSubset<T, SkillWantedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillWanteds and returns the data saved in the database.
     * @param {SkillWantedCreateManyAndReturnArgs} args - Arguments to create many SkillWanteds.
     * @example
     * // Create many SkillWanteds
     * const skillWanted = await prisma.skillWanted.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillWanteds and only return the `id`
     * const skillWantedWithIdOnly = await prisma.skillWanted.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillWantedCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillWantedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SkillWanted.
     * @param {SkillWantedDeleteArgs} args - Arguments to delete one SkillWanted.
     * @example
     * // Delete one SkillWanted
     * const SkillWanted = await prisma.skillWanted.delete({
     *   where: {
     *     // ... filter to delete one SkillWanted
     *   }
     * })
     * 
     */
    delete<T extends SkillWantedDeleteArgs>(args: SelectSubset<T, SkillWantedDeleteArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SkillWanted.
     * @param {SkillWantedUpdateArgs} args - Arguments to update one SkillWanted.
     * @example
     * // Update one SkillWanted
     * const skillWanted = await prisma.skillWanted.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillWantedUpdateArgs>(args: SelectSubset<T, SkillWantedUpdateArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SkillWanteds.
     * @param {SkillWantedDeleteManyArgs} args - Arguments to filter SkillWanteds to delete.
     * @example
     * // Delete a few SkillWanteds
     * const { count } = await prisma.skillWanted.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillWantedDeleteManyArgs>(args?: SelectSubset<T, SkillWantedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillWanteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillWanteds
     * const skillWanted = await prisma.skillWanted.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillWantedUpdateManyArgs>(args: SelectSubset<T, SkillWantedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SkillWanted.
     * @param {SkillWantedUpsertArgs} args - Arguments to update or create a SkillWanted.
     * @example
     * // Update or create a SkillWanted
     * const skillWanted = await prisma.skillWanted.upsert({
     *   create: {
     *     // ... data to create a SkillWanted
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillWanted we want to update
     *   }
     * })
     */
    upsert<T extends SkillWantedUpsertArgs>(args: SelectSubset<T, SkillWantedUpsertArgs<ExtArgs>>): Prisma__SkillWantedClient<$Result.GetResult<Prisma.$SkillWantedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SkillWanteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedCountArgs} args - Arguments to filter SkillWanteds to count.
     * @example
     * // Count the number of SkillWanteds
     * const count = await prisma.skillWanted.count({
     *   where: {
     *     // ... the filter for the SkillWanteds we want to count
     *   }
     * })
    **/
    count<T extends SkillWantedCountArgs>(
      args?: Subset<T, SkillWantedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillWantedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillWanted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillWantedAggregateArgs>(args: Subset<T, SkillWantedAggregateArgs>): Prisma.PrismaPromise<GetSkillWantedAggregateType<T>>

    /**
     * Group by SkillWanted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillWantedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillWantedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillWantedGroupByArgs['orderBy'] }
        : { orderBy?: SkillWantedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillWantedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillWantedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillWanted model
   */
  readonly fields: SkillWantedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillWanted.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillWantedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillWanted model
   */ 
  interface SkillWantedFieldRefs {
    readonly id: FieldRef<"SkillWanted", 'Int'>
    readonly name: FieldRef<"SkillWanted", 'String'>
    readonly userId: FieldRef<"SkillWanted", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SkillWanted findUnique
   */
  export type SkillWantedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter, which SkillWanted to fetch.
     */
    where: SkillWantedWhereUniqueInput
  }

  /**
   * SkillWanted findUniqueOrThrow
   */
  export type SkillWantedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter, which SkillWanted to fetch.
     */
    where: SkillWantedWhereUniqueInput
  }

  /**
   * SkillWanted findFirst
   */
  export type SkillWantedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter, which SkillWanted to fetch.
     */
    where?: SkillWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillWanteds to fetch.
     */
    orderBy?: SkillWantedOrderByWithRelationInput | SkillWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillWanteds.
     */
    cursor?: SkillWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillWanteds.
     */
    distinct?: SkillWantedScalarFieldEnum | SkillWantedScalarFieldEnum[]
  }

  /**
   * SkillWanted findFirstOrThrow
   */
  export type SkillWantedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter, which SkillWanted to fetch.
     */
    where?: SkillWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillWanteds to fetch.
     */
    orderBy?: SkillWantedOrderByWithRelationInput | SkillWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillWanteds.
     */
    cursor?: SkillWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillWanteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillWanteds.
     */
    distinct?: SkillWantedScalarFieldEnum | SkillWantedScalarFieldEnum[]
  }

  /**
   * SkillWanted findMany
   */
  export type SkillWantedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter, which SkillWanteds to fetch.
     */
    where?: SkillWantedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillWanteds to fetch.
     */
    orderBy?: SkillWantedOrderByWithRelationInput | SkillWantedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillWanteds.
     */
    cursor?: SkillWantedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillWanteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillWanteds.
     */
    skip?: number
    distinct?: SkillWantedScalarFieldEnum | SkillWantedScalarFieldEnum[]
  }

  /**
   * SkillWanted create
   */
  export type SkillWantedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillWanted.
     */
    data: XOR<SkillWantedCreateInput, SkillWantedUncheckedCreateInput>
  }

  /**
   * SkillWanted createMany
   */
  export type SkillWantedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillWanteds.
     */
    data: SkillWantedCreateManyInput | SkillWantedCreateManyInput[]
  }

  /**
   * SkillWanted createManyAndReturn
   */
  export type SkillWantedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SkillWanteds.
     */
    data: SkillWantedCreateManyInput | SkillWantedCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillWanted update
   */
  export type SkillWantedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillWanted.
     */
    data: XOR<SkillWantedUpdateInput, SkillWantedUncheckedUpdateInput>
    /**
     * Choose, which SkillWanted to update.
     */
    where: SkillWantedWhereUniqueInput
  }

  /**
   * SkillWanted updateMany
   */
  export type SkillWantedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillWanteds.
     */
    data: XOR<SkillWantedUpdateManyMutationInput, SkillWantedUncheckedUpdateManyInput>
    /**
     * Filter which SkillWanteds to update
     */
    where?: SkillWantedWhereInput
  }

  /**
   * SkillWanted upsert
   */
  export type SkillWantedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillWanted to update in case it exists.
     */
    where: SkillWantedWhereUniqueInput
    /**
     * In case the SkillWanted found by the `where` argument doesn't exist, create a new SkillWanted with this data.
     */
    create: XOR<SkillWantedCreateInput, SkillWantedUncheckedCreateInput>
    /**
     * In case the SkillWanted was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillWantedUpdateInput, SkillWantedUncheckedUpdateInput>
  }

  /**
   * SkillWanted delete
   */
  export type SkillWantedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
    /**
     * Filter which SkillWanted to delete.
     */
    where: SkillWantedWhereUniqueInput
  }

  /**
   * SkillWanted deleteMany
   */
  export type SkillWantedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillWanteds to delete
     */
    where?: SkillWantedWhereInput
  }

  /**
   * SkillWanted without action
   */
  export type SkillWantedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillWanted
     */
    select?: SkillWantedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillWantedInclude<ExtArgs> | null
  }


  /**
   * Model Swap
   */

  export type AggregateSwap = {
    _count: SwapCountAggregateOutputType | null
    _avg: SwapAvgAggregateOutputType | null
    _sum: SwapSumAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  export type SwapAvgAggregateOutputType = {
    id: number | null
    requesterId: number | null
    receiverId: number | null
  }

  export type SwapSumAggregateOutputType = {
    id: number | null
    requesterId: number | null
    receiverId: number | null
  }

  export type SwapMinAggregateOutputType = {
    id: number | null
    requesterId: number | null
    receiverId: number | null
    skillsOffered: string | null
    skillsWanted: string | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SwapMaxAggregateOutputType = {
    id: number | null
    requesterId: number | null
    receiverId: number | null
    skillsOffered: string | null
    skillsWanted: string | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SwapCountAggregateOutputType = {
    id: number
    requesterId: number
    receiverId: number
    skillsOffered: number
    skillsWanted: number
    status: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SwapAvgAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
  }

  export type SwapSumAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
  }

  export type SwapMinAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    skillsOffered?: true
    skillsWanted?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SwapMaxAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    skillsOffered?: true
    skillsWanted?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SwapCountAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    skillsOffered?: true
    skillsWanted?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SwapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Swap to aggregate.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Swaps
    **/
    _count?: true | SwapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SwapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SwapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapMaxAggregateInputType
  }

  export type GetSwapAggregateType<T extends SwapAggregateArgs> = {
        [P in keyof T & keyof AggregateSwap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwap[P]>
      : GetScalarType<T[P], AggregateSwap[P]>
  }




  export type SwapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapWhereInput
    orderBy?: SwapOrderByWithAggregationInput | SwapOrderByWithAggregationInput[]
    by: SwapScalarFieldEnum[] | SwapScalarFieldEnum
    having?: SwapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapCountAggregateInputType | true
    _avg?: SwapAvgAggregateInputType
    _sum?: SwapSumAggregateInputType
    _min?: SwapMinAggregateInputType
    _max?: SwapMaxAggregateInputType
  }

  export type SwapGroupByOutputType = {
    id: number
    requesterId: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message: string | null
    createdAt: Date
    updatedAt: Date
    _count: SwapCountAggregateOutputType | null
    _avg: SwapAvgAggregateOutputType | null
    _sum: SwapSumAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  type GetSwapGroupByPayload<T extends SwapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapGroupByOutputType[P]>
            : GetScalarType<T[P], SwapGroupByOutputType[P]>
        }
      >
    >


  export type SwapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    skillsOffered?: boolean
    skillsWanted?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    feedback?: boolean | Swap$feedbackArgs<ExtArgs>
  }, ExtArgs["result"]["swap"]>

  export type SwapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    skillsOffered?: boolean
    skillsWanted?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swap"]>

  export type SwapSelectScalar = {
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    skillsOffered?: boolean
    skillsWanted?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SwapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    feedback?: boolean | Swap$feedbackArgs<ExtArgs>
  }
  export type SwapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SwapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Swap"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
      feedback: Prisma.$FeedbackPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requesterId: number
      receiverId: number
      skillsOffered: string
      skillsWanted: string
      status: string
      message: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["swap"]>
    composites: {}
  }

  type SwapGetPayload<S extends boolean | null | undefined | SwapDefaultArgs> = $Result.GetResult<Prisma.$SwapPayload, S>

  type SwapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SwapFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SwapCountAggregateInputType | true
    }

  export interface SwapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Swap'], meta: { name: 'Swap' } }
    /**
     * Find zero or one Swap that matches the filter.
     * @param {SwapFindUniqueArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SwapFindUniqueArgs>(args: SelectSubset<T, SwapFindUniqueArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Swap that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SwapFindUniqueOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SwapFindUniqueOrThrowArgs>(args: SelectSubset<T, SwapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Swap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindFirstArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SwapFindFirstArgs>(args?: SelectSubset<T, SwapFindFirstArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Swap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindFirstOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SwapFindFirstOrThrowArgs>(args?: SelectSubset<T, SwapFindFirstOrThrowArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Swaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Swaps
     * const swaps = await prisma.swap.findMany()
     * 
     * // Get first 10 Swaps
     * const swaps = await prisma.swap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapWithIdOnly = await prisma.swap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SwapFindManyArgs>(args?: SelectSubset<T, SwapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Swap.
     * @param {SwapCreateArgs} args - Arguments to create a Swap.
     * @example
     * // Create one Swap
     * const Swap = await prisma.swap.create({
     *   data: {
     *     // ... data to create a Swap
     *   }
     * })
     * 
     */
    create<T extends SwapCreateArgs>(args: SelectSubset<T, SwapCreateArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Swaps.
     * @param {SwapCreateManyArgs} args - Arguments to create many Swaps.
     * @example
     * // Create many Swaps
     * const swap = await prisma.swap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SwapCreateManyArgs>(args?: SelectSubset<T, SwapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Swaps and returns the data saved in the database.
     * @param {SwapCreateManyAndReturnArgs} args - Arguments to create many Swaps.
     * @example
     * // Create many Swaps
     * const swap = await prisma.swap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Swaps and only return the `id`
     * const swapWithIdOnly = await prisma.swap.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SwapCreateManyAndReturnArgs>(args?: SelectSubset<T, SwapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Swap.
     * @param {SwapDeleteArgs} args - Arguments to delete one Swap.
     * @example
     * // Delete one Swap
     * const Swap = await prisma.swap.delete({
     *   where: {
     *     // ... filter to delete one Swap
     *   }
     * })
     * 
     */
    delete<T extends SwapDeleteArgs>(args: SelectSubset<T, SwapDeleteArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Swap.
     * @param {SwapUpdateArgs} args - Arguments to update one Swap.
     * @example
     * // Update one Swap
     * const swap = await prisma.swap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SwapUpdateArgs>(args: SelectSubset<T, SwapUpdateArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Swaps.
     * @param {SwapDeleteManyArgs} args - Arguments to filter Swaps to delete.
     * @example
     * // Delete a few Swaps
     * const { count } = await prisma.swap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SwapDeleteManyArgs>(args?: SelectSubset<T, SwapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Swaps
     * const swap = await prisma.swap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SwapUpdateManyArgs>(args: SelectSubset<T, SwapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Swap.
     * @param {SwapUpsertArgs} args - Arguments to update or create a Swap.
     * @example
     * // Update or create a Swap
     * const swap = await prisma.swap.upsert({
     *   create: {
     *     // ... data to create a Swap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Swap we want to update
     *   }
     * })
     */
    upsert<T extends SwapUpsertArgs>(args: SelectSubset<T, SwapUpsertArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapCountArgs} args - Arguments to filter Swaps to count.
     * @example
     * // Count the number of Swaps
     * const count = await prisma.swap.count({
     *   where: {
     *     // ... the filter for the Swaps we want to count
     *   }
     * })
    **/
    count<T extends SwapCountArgs>(
      args?: Subset<T, SwapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapAggregateArgs>(args: Subset<T, SwapAggregateArgs>): Prisma.PrismaPromise<GetSwapAggregateType<T>>

    /**
     * Group by Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwapGroupByArgs['orderBy'] }
        : { orderBy?: SwapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Swap model
   */
  readonly fields: SwapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Swap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SwapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    feedback<T extends Swap$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, Swap$feedbackArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Swap model
   */ 
  interface SwapFieldRefs {
    readonly id: FieldRef<"Swap", 'Int'>
    readonly requesterId: FieldRef<"Swap", 'Int'>
    readonly receiverId: FieldRef<"Swap", 'Int'>
    readonly skillsOffered: FieldRef<"Swap", 'String'>
    readonly skillsWanted: FieldRef<"Swap", 'String'>
    readonly status: FieldRef<"Swap", 'String'>
    readonly message: FieldRef<"Swap", 'String'>
    readonly createdAt: FieldRef<"Swap", 'DateTime'>
    readonly updatedAt: FieldRef<"Swap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Swap findUnique
   */
  export type SwapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap findUniqueOrThrow
   */
  export type SwapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap findFirst
   */
  export type SwapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap findFirstOrThrow
   */
  export type SwapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap findMany
   */
  export type SwapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swaps to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap create
   */
  export type SwapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The data needed to create a Swap.
     */
    data: XOR<SwapCreateInput, SwapUncheckedCreateInput>
  }

  /**
   * Swap createMany
   */
  export type SwapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Swaps.
     */
    data: SwapCreateManyInput | SwapCreateManyInput[]
  }

  /**
   * Swap createManyAndReturn
   */
  export type SwapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Swaps.
     */
    data: SwapCreateManyInput | SwapCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Swap update
   */
  export type SwapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The data needed to update a Swap.
     */
    data: XOR<SwapUpdateInput, SwapUncheckedUpdateInput>
    /**
     * Choose, which Swap to update.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap updateMany
   */
  export type SwapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Swaps.
     */
    data: XOR<SwapUpdateManyMutationInput, SwapUncheckedUpdateManyInput>
    /**
     * Filter which Swaps to update
     */
    where?: SwapWhereInput
  }

  /**
   * Swap upsert
   */
  export type SwapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The filter to search for the Swap to update in case it exists.
     */
    where: SwapWhereUniqueInput
    /**
     * In case the Swap found by the `where` argument doesn't exist, create a new Swap with this data.
     */
    create: XOR<SwapCreateInput, SwapUncheckedCreateInput>
    /**
     * In case the Swap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwapUpdateInput, SwapUncheckedUpdateInput>
  }

  /**
   * Swap delete
   */
  export type SwapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter which Swap to delete.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap deleteMany
   */
  export type SwapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Swaps to delete
     */
    where?: SwapWhereInput
  }

  /**
   * Swap.feedback
   */
  export type Swap$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
  }

  /**
   * Swap without action
   */
  export type SwapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    swapId: number | null
    userId: number | null
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    swapId: number | null
    userId: number | null
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    swapId: number | null
    userId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    swapId: number | null
    userId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    swapId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    swapId?: true
    userId?: true
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    swapId?: true
    userId?: true
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    swapId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    swapId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    swapId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    swapId: number
    userId: number
    rating: number
    comment: string | null
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    swapId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    swap?: boolean | SwapDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    swapId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    swap?: boolean | SwapDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    swapId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    swap?: boolean | SwapDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    swap?: boolean | SwapDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      swap: Prisma.$SwapPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      swapId: number
      userId: number
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    swap<T extends SwapDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SwapDefaultArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly swapId: FieldRef<"Feedback", 'Int'>
    readonly userId: FieldRef<"Feedback", 'Int'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    location: 'location',
    photoUrl: 'photoUrl',
    isAdmin: 'isAdmin',
    isBanned: 'isBanned',
    isPublic: 'isPublic',
    availability: 'availability',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SkillOfferedScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type SkillOfferedScalarFieldEnum = (typeof SkillOfferedScalarFieldEnum)[keyof typeof SkillOfferedScalarFieldEnum]


  export const SkillWantedScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type SkillWantedScalarFieldEnum = (typeof SkillWantedScalarFieldEnum)[keyof typeof SkillWantedScalarFieldEnum]


  export const SwapScalarFieldEnum: {
    id: 'id',
    requesterId: 'requesterId',
    receiverId: 'receiverId',
    skillsOffered: 'skillsOffered',
    skillsWanted: 'skillsWanted',
    status: 'status',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SwapScalarFieldEnum = (typeof SwapScalarFieldEnum)[keyof typeof SwapScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    swapId: 'swapId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    photoUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    isPublic?: BoolFilter<"User"> | boolean
    availability?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    skillsOffered?: SkillOfferedListRelationFilter
    skillsWanted?: SkillWantedListRelationFilter
    swapsRequested?: SwapListRelationFilter
    swapsReceived?: SwapListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    isPublic?: SortOrder
    availability?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    skillsOffered?: SkillOfferedOrderByRelationAggregateInput
    skillsWanted?: SkillWantedOrderByRelationAggregateInput
    swapsRequested?: SwapOrderByRelationAggregateInput
    swapsReceived?: SwapOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    photoUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    isPublic?: BoolFilter<"User"> | boolean
    availability?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    skillsOffered?: SkillOfferedListRelationFilter
    skillsWanted?: SkillWantedListRelationFilter
    swapsRequested?: SwapListRelationFilter
    swapsReceived?: SwapListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    isPublic?: SortOrder
    availability?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
    isPublic?: BoolWithAggregatesFilter<"User"> | boolean
    availability?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SkillOfferedWhereInput = {
    AND?: SkillOfferedWhereInput | SkillOfferedWhereInput[]
    OR?: SkillOfferedWhereInput[]
    NOT?: SkillOfferedWhereInput | SkillOfferedWhereInput[]
    id?: IntFilter<"SkillOffered"> | number
    name?: StringFilter<"SkillOffered"> | string
    userId?: IntFilter<"SkillOffered"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SkillOfferedOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SkillOfferedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillOfferedWhereInput | SkillOfferedWhereInput[]
    OR?: SkillOfferedWhereInput[]
    NOT?: SkillOfferedWhereInput | SkillOfferedWhereInput[]
    name?: StringFilter<"SkillOffered"> | string
    userId?: IntFilter<"SkillOffered"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SkillOfferedOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: SkillOfferedCountOrderByAggregateInput
    _avg?: SkillOfferedAvgOrderByAggregateInput
    _max?: SkillOfferedMaxOrderByAggregateInput
    _min?: SkillOfferedMinOrderByAggregateInput
    _sum?: SkillOfferedSumOrderByAggregateInput
  }

  export type SkillOfferedScalarWhereWithAggregatesInput = {
    AND?: SkillOfferedScalarWhereWithAggregatesInput | SkillOfferedScalarWhereWithAggregatesInput[]
    OR?: SkillOfferedScalarWhereWithAggregatesInput[]
    NOT?: SkillOfferedScalarWhereWithAggregatesInput | SkillOfferedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillOffered"> | number
    name?: StringWithAggregatesFilter<"SkillOffered"> | string
    userId?: IntWithAggregatesFilter<"SkillOffered"> | number
  }

  export type SkillWantedWhereInput = {
    AND?: SkillWantedWhereInput | SkillWantedWhereInput[]
    OR?: SkillWantedWhereInput[]
    NOT?: SkillWantedWhereInput | SkillWantedWhereInput[]
    id?: IntFilter<"SkillWanted"> | number
    name?: StringFilter<"SkillWanted"> | string
    userId?: IntFilter<"SkillWanted"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SkillWantedOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SkillWantedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillWantedWhereInput | SkillWantedWhereInput[]
    OR?: SkillWantedWhereInput[]
    NOT?: SkillWantedWhereInput | SkillWantedWhereInput[]
    name?: StringFilter<"SkillWanted"> | string
    userId?: IntFilter<"SkillWanted"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SkillWantedOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: SkillWantedCountOrderByAggregateInput
    _avg?: SkillWantedAvgOrderByAggregateInput
    _max?: SkillWantedMaxOrderByAggregateInput
    _min?: SkillWantedMinOrderByAggregateInput
    _sum?: SkillWantedSumOrderByAggregateInput
  }

  export type SkillWantedScalarWhereWithAggregatesInput = {
    AND?: SkillWantedScalarWhereWithAggregatesInput | SkillWantedScalarWhereWithAggregatesInput[]
    OR?: SkillWantedScalarWhereWithAggregatesInput[]
    NOT?: SkillWantedScalarWhereWithAggregatesInput | SkillWantedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillWanted"> | number
    name?: StringWithAggregatesFilter<"SkillWanted"> | string
    userId?: IntWithAggregatesFilter<"SkillWanted"> | number
  }

  export type SwapWhereInput = {
    AND?: SwapWhereInput | SwapWhereInput[]
    OR?: SwapWhereInput[]
    NOT?: SwapWhereInput | SwapWhereInput[]
    id?: IntFilter<"Swap"> | number
    requesterId?: IntFilter<"Swap"> | number
    receiverId?: IntFilter<"Swap"> | number
    skillsOffered?: StringFilter<"Swap"> | string
    skillsWanted?: StringFilter<"Swap"> | string
    status?: StringFilter<"Swap"> | string
    message?: StringNullableFilter<"Swap"> | string | null
    createdAt?: DateTimeFilter<"Swap"> | Date | string
    updatedAt?: DateTimeFilter<"Swap"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    feedback?: XOR<FeedbackNullableRelationFilter, FeedbackWhereInput> | null
  }

  export type SwapOrderByWithRelationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    skillsOffered?: SortOrder
    skillsWanted?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    feedback?: FeedbackOrderByWithRelationInput
  }

  export type SwapWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SwapWhereInput | SwapWhereInput[]
    OR?: SwapWhereInput[]
    NOT?: SwapWhereInput | SwapWhereInput[]
    requesterId?: IntFilter<"Swap"> | number
    receiverId?: IntFilter<"Swap"> | number
    skillsOffered?: StringFilter<"Swap"> | string
    skillsWanted?: StringFilter<"Swap"> | string
    status?: StringFilter<"Swap"> | string
    message?: StringNullableFilter<"Swap"> | string | null
    createdAt?: DateTimeFilter<"Swap"> | Date | string
    updatedAt?: DateTimeFilter<"Swap"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    feedback?: XOR<FeedbackNullableRelationFilter, FeedbackWhereInput> | null
  }, "id">

  export type SwapOrderByWithAggregationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    skillsOffered?: SortOrder
    skillsWanted?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SwapCountOrderByAggregateInput
    _avg?: SwapAvgOrderByAggregateInput
    _max?: SwapMaxOrderByAggregateInput
    _min?: SwapMinOrderByAggregateInput
    _sum?: SwapSumOrderByAggregateInput
  }

  export type SwapScalarWhereWithAggregatesInput = {
    AND?: SwapScalarWhereWithAggregatesInput | SwapScalarWhereWithAggregatesInput[]
    OR?: SwapScalarWhereWithAggregatesInput[]
    NOT?: SwapScalarWhereWithAggregatesInput | SwapScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Swap"> | number
    requesterId?: IntWithAggregatesFilter<"Swap"> | number
    receiverId?: IntWithAggregatesFilter<"Swap"> | number
    skillsOffered?: StringWithAggregatesFilter<"Swap"> | string
    skillsWanted?: StringWithAggregatesFilter<"Swap"> | string
    status?: StringWithAggregatesFilter<"Swap"> | string
    message?: StringNullableWithAggregatesFilter<"Swap"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Swap"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Swap"> | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    swapId?: IntFilter<"Feedback"> | number
    userId?: IntFilter<"Feedback"> | number
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    swap?: XOR<SwapRelationFilter, SwapWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    swap?: SwapOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    swapId?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    userId?: IntFilter<"Feedback"> | number
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    swap?: XOR<SwapRelationFilter, SwapWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "swapId">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    swapId?: IntWithAggregatesFilter<"Feedback"> | number
    userId?: IntWithAggregatesFilter<"Feedback"> | number
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedUncheckedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapUncheckedCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapUncheckedCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUncheckedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUncheckedUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUncheckedUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillOfferedCreateInput = {
    name: string
    user: UserCreateNestedOneWithoutSkillsOfferedInput
  }

  export type SkillOfferedUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
  }

  export type SkillOfferedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsOfferedNestedInput
  }

  export type SkillOfferedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SkillOfferedCreateManyInput = {
    id?: number
    name: string
    userId: number
  }

  export type SkillOfferedUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillOfferedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SkillWantedCreateInput = {
    name: string
    user: UserCreateNestedOneWithoutSkillsWantedInput
  }

  export type SkillWantedUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
  }

  export type SkillWantedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSkillsWantedNestedInput
  }

  export type SkillWantedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SkillWantedCreateManyInput = {
    id?: number
    name: string
    userId: number
  }

  export type SkillWantedUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillWantedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SwapCreateInput = {
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSwapsRequestedInput
    receiver: UserCreateNestedOneWithoutSwapsReceivedInput
    feedback?: FeedbackCreateNestedOneWithoutSwapInput
  }

  export type SwapUncheckedCreateInput = {
    id?: number
    requesterId: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    feedback?: FeedbackUncheckedCreateNestedOneWithoutSwapInput
  }

  export type SwapUpdateInput = {
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSwapsRequestedNestedInput
    receiver?: UserUpdateOneRequiredWithoutSwapsReceivedNestedInput
    feedback?: FeedbackUpdateOneWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUncheckedUpdateOneWithoutSwapNestedInput
  }

  export type SwapCreateManyInput = {
    id?: number
    requesterId: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SwapUpdateManyMutationInput = {
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    swap: SwapCreateNestedOneWithoutFeedbackInput
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    swapId: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swap?: SwapUpdateOneRequiredWithoutFeedbackNestedInput
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    swapId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    swapId: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    swapId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SkillOfferedListRelationFilter = {
    every?: SkillOfferedWhereInput
    some?: SkillOfferedWhereInput
    none?: SkillOfferedWhereInput
  }

  export type SkillWantedListRelationFilter = {
    every?: SkillWantedWhereInput
    some?: SkillWantedWhereInput
    none?: SkillWantedWhereInput
  }

  export type SwapListRelationFilter = {
    every?: SwapWhereInput
    some?: SwapWhereInput
    none?: SwapWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SkillOfferedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillWantedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
    photoUrl?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    isPublic?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
    photoUrl?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    isPublic?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
    photoUrl?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    isPublic?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SkillOfferedCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillOfferedAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SkillOfferedMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillOfferedMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillOfferedSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SkillWantedCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillWantedAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SkillWantedMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillWantedMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type SkillWantedSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackNullableRelationFilter = {
    is?: FeedbackWhereInput | null
    isNot?: FeedbackWhereInput | null
  }

  export type SwapCountOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    skillsOffered?: SortOrder
    skillsWanted?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SwapAvgOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
  }

  export type SwapMaxOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    skillsOffered?: SortOrder
    skillsWanted?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SwapMinOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    skillsOffered?: SortOrder
    skillsWanted?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SwapSumOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
  }

  export type SwapRelationFilter = {
    is?: SwapWhereInput
    isNot?: SwapWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    swapId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type SkillOfferedCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput> | SkillOfferedCreateWithoutUserInput[] | SkillOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillOfferedCreateOrConnectWithoutUserInput | SkillOfferedCreateOrConnectWithoutUserInput[]
    createMany?: SkillOfferedCreateManyUserInputEnvelope
    connect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
  }

  export type SkillWantedCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput> | SkillWantedCreateWithoutUserInput[] | SkillWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillWantedCreateOrConnectWithoutUserInput | SkillWantedCreateOrConnectWithoutUserInput[]
    createMany?: SkillWantedCreateManyUserInputEnvelope
    connect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
  }

  export type SwapCreateNestedManyWithoutRequesterInput = {
    create?: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput> | SwapCreateWithoutRequesterInput[] | SwapUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutRequesterInput | SwapCreateOrConnectWithoutRequesterInput[]
    createMany?: SwapCreateManyRequesterInputEnvelope
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
  }

  export type SwapCreateNestedManyWithoutReceiverInput = {
    create?: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput> | SwapCreateWithoutReceiverInput[] | SwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutReceiverInput | SwapCreateOrConnectWithoutReceiverInput[]
    createMany?: SwapCreateManyReceiverInputEnvelope
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type SkillOfferedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput> | SkillOfferedCreateWithoutUserInput[] | SkillOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillOfferedCreateOrConnectWithoutUserInput | SkillOfferedCreateOrConnectWithoutUserInput[]
    createMany?: SkillOfferedCreateManyUserInputEnvelope
    connect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
  }

  export type SkillWantedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput> | SkillWantedCreateWithoutUserInput[] | SkillWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillWantedCreateOrConnectWithoutUserInput | SkillWantedCreateOrConnectWithoutUserInput[]
    createMany?: SkillWantedCreateManyUserInputEnvelope
    connect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
  }

  export type SwapUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput> | SwapCreateWithoutRequesterInput[] | SwapUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutRequesterInput | SwapCreateOrConnectWithoutRequesterInput[]
    createMany?: SwapCreateManyRequesterInputEnvelope
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
  }

  export type SwapUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput> | SwapCreateWithoutReceiverInput[] | SwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutReceiverInput | SwapCreateOrConnectWithoutReceiverInput[]
    createMany?: SwapCreateManyReceiverInputEnvelope
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SkillOfferedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput> | SkillOfferedCreateWithoutUserInput[] | SkillOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillOfferedCreateOrConnectWithoutUserInput | SkillOfferedCreateOrConnectWithoutUserInput[]
    upsert?: SkillOfferedUpsertWithWhereUniqueWithoutUserInput | SkillOfferedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillOfferedCreateManyUserInputEnvelope
    set?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    disconnect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    delete?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    connect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    update?: SkillOfferedUpdateWithWhereUniqueWithoutUserInput | SkillOfferedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillOfferedUpdateManyWithWhereWithoutUserInput | SkillOfferedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillOfferedScalarWhereInput | SkillOfferedScalarWhereInput[]
  }

  export type SkillWantedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput> | SkillWantedCreateWithoutUserInput[] | SkillWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillWantedCreateOrConnectWithoutUserInput | SkillWantedCreateOrConnectWithoutUserInput[]
    upsert?: SkillWantedUpsertWithWhereUniqueWithoutUserInput | SkillWantedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillWantedCreateManyUserInputEnvelope
    set?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    disconnect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    delete?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    connect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    update?: SkillWantedUpdateWithWhereUniqueWithoutUserInput | SkillWantedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillWantedUpdateManyWithWhereWithoutUserInput | SkillWantedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillWantedScalarWhereInput | SkillWantedScalarWhereInput[]
  }

  export type SwapUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput> | SwapCreateWithoutRequesterInput[] | SwapUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutRequesterInput | SwapCreateOrConnectWithoutRequesterInput[]
    upsert?: SwapUpsertWithWhereUniqueWithoutRequesterInput | SwapUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: SwapCreateManyRequesterInputEnvelope
    set?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    disconnect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    delete?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    update?: SwapUpdateWithWhereUniqueWithoutRequesterInput | SwapUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: SwapUpdateManyWithWhereWithoutRequesterInput | SwapUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: SwapScalarWhereInput | SwapScalarWhereInput[]
  }

  export type SwapUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput> | SwapCreateWithoutReceiverInput[] | SwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutReceiverInput | SwapCreateOrConnectWithoutReceiverInput[]
    upsert?: SwapUpsertWithWhereUniqueWithoutReceiverInput | SwapUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: SwapCreateManyReceiverInputEnvelope
    set?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    disconnect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    delete?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    update?: SwapUpdateWithWhereUniqueWithoutReceiverInput | SwapUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: SwapUpdateManyWithWhereWithoutReceiverInput | SwapUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: SwapScalarWhereInput | SwapScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SkillOfferedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput> | SkillOfferedCreateWithoutUserInput[] | SkillOfferedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillOfferedCreateOrConnectWithoutUserInput | SkillOfferedCreateOrConnectWithoutUserInput[]
    upsert?: SkillOfferedUpsertWithWhereUniqueWithoutUserInput | SkillOfferedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillOfferedCreateManyUserInputEnvelope
    set?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    disconnect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    delete?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    connect?: SkillOfferedWhereUniqueInput | SkillOfferedWhereUniqueInput[]
    update?: SkillOfferedUpdateWithWhereUniqueWithoutUserInput | SkillOfferedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillOfferedUpdateManyWithWhereWithoutUserInput | SkillOfferedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillOfferedScalarWhereInput | SkillOfferedScalarWhereInput[]
  }

  export type SkillWantedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput> | SkillWantedCreateWithoutUserInput[] | SkillWantedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillWantedCreateOrConnectWithoutUserInput | SkillWantedCreateOrConnectWithoutUserInput[]
    upsert?: SkillWantedUpsertWithWhereUniqueWithoutUserInput | SkillWantedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillWantedCreateManyUserInputEnvelope
    set?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    disconnect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    delete?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    connect?: SkillWantedWhereUniqueInput | SkillWantedWhereUniqueInput[]
    update?: SkillWantedUpdateWithWhereUniqueWithoutUserInput | SkillWantedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillWantedUpdateManyWithWhereWithoutUserInput | SkillWantedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillWantedScalarWhereInput | SkillWantedScalarWhereInput[]
  }

  export type SwapUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput> | SwapCreateWithoutRequesterInput[] | SwapUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutRequesterInput | SwapCreateOrConnectWithoutRequesterInput[]
    upsert?: SwapUpsertWithWhereUniqueWithoutRequesterInput | SwapUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: SwapCreateManyRequesterInputEnvelope
    set?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    disconnect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    delete?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    update?: SwapUpdateWithWhereUniqueWithoutRequesterInput | SwapUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: SwapUpdateManyWithWhereWithoutRequesterInput | SwapUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: SwapScalarWhereInput | SwapScalarWhereInput[]
  }

  export type SwapUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput> | SwapCreateWithoutReceiverInput[] | SwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: SwapCreateOrConnectWithoutReceiverInput | SwapCreateOrConnectWithoutReceiverInput[]
    upsert?: SwapUpsertWithWhereUniqueWithoutReceiverInput | SwapUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: SwapCreateManyReceiverInputEnvelope
    set?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    disconnect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    delete?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    connect?: SwapWhereUniqueInput | SwapWhereUniqueInput[]
    update?: SwapUpdateWithWhereUniqueWithoutReceiverInput | SwapUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: SwapUpdateManyWithWhereWithoutReceiverInput | SwapUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: SwapScalarWhereInput | SwapScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSkillsOfferedInput = {
    create?: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsOfferedInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSkillsOfferedNestedInput = {
    create?: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsOfferedInput
    upsert?: UserUpsertWithoutSkillsOfferedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSkillsOfferedInput, UserUpdateWithoutSkillsOfferedInput>, UserUncheckedUpdateWithoutSkillsOfferedInput>
  }

  export type UserCreateNestedOneWithoutSkillsWantedInput = {
    create?: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsWantedInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSkillsWantedNestedInput = {
    create?: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsWantedInput
    upsert?: UserUpsertWithoutSkillsWantedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSkillsWantedInput, UserUpdateWithoutSkillsWantedInput>, UserUncheckedUpdateWithoutSkillsWantedInput>
  }

  export type UserCreateNestedOneWithoutSwapsRequestedInput = {
    create?: XOR<UserCreateWithoutSwapsRequestedInput, UserUncheckedCreateWithoutSwapsRequestedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapsRequestedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSwapsReceivedInput = {
    create?: XOR<UserCreateWithoutSwapsReceivedInput, UserUncheckedCreateWithoutSwapsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type FeedbackCreateNestedOneWithoutSwapInput = {
    create?: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutSwapInput
    connect?: FeedbackWhereUniqueInput
  }

  export type FeedbackUncheckedCreateNestedOneWithoutSwapInput = {
    create?: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutSwapInput
    connect?: FeedbackWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSwapsRequestedNestedInput = {
    create?: XOR<UserCreateWithoutSwapsRequestedInput, UserUncheckedCreateWithoutSwapsRequestedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapsRequestedInput
    upsert?: UserUpsertWithoutSwapsRequestedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSwapsRequestedInput, UserUpdateWithoutSwapsRequestedInput>, UserUncheckedUpdateWithoutSwapsRequestedInput>
  }

  export type UserUpdateOneRequiredWithoutSwapsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutSwapsReceivedInput, UserUncheckedCreateWithoutSwapsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapsReceivedInput
    upsert?: UserUpsertWithoutSwapsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSwapsReceivedInput, UserUpdateWithoutSwapsReceivedInput>, UserUncheckedUpdateWithoutSwapsReceivedInput>
  }

  export type FeedbackUpdateOneWithoutSwapNestedInput = {
    create?: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutSwapInput
    upsert?: FeedbackUpsertWithoutSwapInput
    disconnect?: FeedbackWhereInput | boolean
    delete?: FeedbackWhereInput | boolean
    connect?: FeedbackWhereUniqueInput
    update?: XOR<XOR<FeedbackUpdateToOneWithWhereWithoutSwapInput, FeedbackUpdateWithoutSwapInput>, FeedbackUncheckedUpdateWithoutSwapInput>
  }

  export type FeedbackUncheckedUpdateOneWithoutSwapNestedInput = {
    create?: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutSwapInput
    upsert?: FeedbackUpsertWithoutSwapInput
    disconnect?: FeedbackWhereInput | boolean
    delete?: FeedbackWhereInput | boolean
    connect?: FeedbackWhereUniqueInput
    update?: XOR<XOR<FeedbackUpdateToOneWithWhereWithoutSwapInput, FeedbackUpdateWithoutSwapInput>, FeedbackUncheckedUpdateWithoutSwapInput>
  }

  export type SwapCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<SwapCreateWithoutFeedbackInput, SwapUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: SwapCreateOrConnectWithoutFeedbackInput
    connect?: SwapWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type SwapUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<SwapCreateWithoutFeedbackInput, SwapUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: SwapCreateOrConnectWithoutFeedbackInput
    upsert?: SwapUpsertWithoutFeedbackInput
    connect?: SwapWhereUniqueInput
    update?: XOR<XOR<SwapUpdateToOneWithWhereWithoutFeedbackInput, SwapUpdateWithoutFeedbackInput>, SwapUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SkillOfferedCreateWithoutUserInput = {
    name: string
  }

  export type SkillOfferedUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
  }

  export type SkillOfferedCreateOrConnectWithoutUserInput = {
    where: SkillOfferedWhereUniqueInput
    create: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput>
  }

  export type SkillOfferedCreateManyUserInputEnvelope = {
    data: SkillOfferedCreateManyUserInput | SkillOfferedCreateManyUserInput[]
  }

  export type SkillWantedCreateWithoutUserInput = {
    name: string
  }

  export type SkillWantedUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
  }

  export type SkillWantedCreateOrConnectWithoutUserInput = {
    where: SkillWantedWhereUniqueInput
    create: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput>
  }

  export type SkillWantedCreateManyUserInputEnvelope = {
    data: SkillWantedCreateManyUserInput | SkillWantedCreateManyUserInput[]
  }

  export type SwapCreateWithoutRequesterInput = {
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutSwapsReceivedInput
    feedback?: FeedbackCreateNestedOneWithoutSwapInput
  }

  export type SwapUncheckedCreateWithoutRequesterInput = {
    id?: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    feedback?: FeedbackUncheckedCreateNestedOneWithoutSwapInput
  }

  export type SwapCreateOrConnectWithoutRequesterInput = {
    where: SwapWhereUniqueInput
    create: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput>
  }

  export type SwapCreateManyRequesterInputEnvelope = {
    data: SwapCreateManyRequesterInput | SwapCreateManyRequesterInput[]
  }

  export type SwapCreateWithoutReceiverInput = {
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSwapsRequestedInput
    feedback?: FeedbackCreateNestedOneWithoutSwapInput
  }

  export type SwapUncheckedCreateWithoutReceiverInput = {
    id?: number
    requesterId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    feedback?: FeedbackUncheckedCreateNestedOneWithoutSwapInput
  }

  export type SwapCreateOrConnectWithoutReceiverInput = {
    where: SwapWhereUniqueInput
    create: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput>
  }

  export type SwapCreateManyReceiverInputEnvelope = {
    data: SwapCreateManyReceiverInput | SwapCreateManyReceiverInput[]
  }

  export type FeedbackCreateWithoutUserInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    swap: SwapCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    swapId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
  }

  export type SkillOfferedUpsertWithWhereUniqueWithoutUserInput = {
    where: SkillOfferedWhereUniqueInput
    update: XOR<SkillOfferedUpdateWithoutUserInput, SkillOfferedUncheckedUpdateWithoutUserInput>
    create: XOR<SkillOfferedCreateWithoutUserInput, SkillOfferedUncheckedCreateWithoutUserInput>
  }

  export type SkillOfferedUpdateWithWhereUniqueWithoutUserInput = {
    where: SkillOfferedWhereUniqueInput
    data: XOR<SkillOfferedUpdateWithoutUserInput, SkillOfferedUncheckedUpdateWithoutUserInput>
  }

  export type SkillOfferedUpdateManyWithWhereWithoutUserInput = {
    where: SkillOfferedScalarWhereInput
    data: XOR<SkillOfferedUpdateManyMutationInput, SkillOfferedUncheckedUpdateManyWithoutUserInput>
  }

  export type SkillOfferedScalarWhereInput = {
    AND?: SkillOfferedScalarWhereInput | SkillOfferedScalarWhereInput[]
    OR?: SkillOfferedScalarWhereInput[]
    NOT?: SkillOfferedScalarWhereInput | SkillOfferedScalarWhereInput[]
    id?: IntFilter<"SkillOffered"> | number
    name?: StringFilter<"SkillOffered"> | string
    userId?: IntFilter<"SkillOffered"> | number
  }

  export type SkillWantedUpsertWithWhereUniqueWithoutUserInput = {
    where: SkillWantedWhereUniqueInput
    update: XOR<SkillWantedUpdateWithoutUserInput, SkillWantedUncheckedUpdateWithoutUserInput>
    create: XOR<SkillWantedCreateWithoutUserInput, SkillWantedUncheckedCreateWithoutUserInput>
  }

  export type SkillWantedUpdateWithWhereUniqueWithoutUserInput = {
    where: SkillWantedWhereUniqueInput
    data: XOR<SkillWantedUpdateWithoutUserInput, SkillWantedUncheckedUpdateWithoutUserInput>
  }

  export type SkillWantedUpdateManyWithWhereWithoutUserInput = {
    where: SkillWantedScalarWhereInput
    data: XOR<SkillWantedUpdateManyMutationInput, SkillWantedUncheckedUpdateManyWithoutUserInput>
  }

  export type SkillWantedScalarWhereInput = {
    AND?: SkillWantedScalarWhereInput | SkillWantedScalarWhereInput[]
    OR?: SkillWantedScalarWhereInput[]
    NOT?: SkillWantedScalarWhereInput | SkillWantedScalarWhereInput[]
    id?: IntFilter<"SkillWanted"> | number
    name?: StringFilter<"SkillWanted"> | string
    userId?: IntFilter<"SkillWanted"> | number
  }

  export type SwapUpsertWithWhereUniqueWithoutRequesterInput = {
    where: SwapWhereUniqueInput
    update: XOR<SwapUpdateWithoutRequesterInput, SwapUncheckedUpdateWithoutRequesterInput>
    create: XOR<SwapCreateWithoutRequesterInput, SwapUncheckedCreateWithoutRequesterInput>
  }

  export type SwapUpdateWithWhereUniqueWithoutRequesterInput = {
    where: SwapWhereUniqueInput
    data: XOR<SwapUpdateWithoutRequesterInput, SwapUncheckedUpdateWithoutRequesterInput>
  }

  export type SwapUpdateManyWithWhereWithoutRequesterInput = {
    where: SwapScalarWhereInput
    data: XOR<SwapUpdateManyMutationInput, SwapUncheckedUpdateManyWithoutRequesterInput>
  }

  export type SwapScalarWhereInput = {
    AND?: SwapScalarWhereInput | SwapScalarWhereInput[]
    OR?: SwapScalarWhereInput[]
    NOT?: SwapScalarWhereInput | SwapScalarWhereInput[]
    id?: IntFilter<"Swap"> | number
    requesterId?: IntFilter<"Swap"> | number
    receiverId?: IntFilter<"Swap"> | number
    skillsOffered?: StringFilter<"Swap"> | string
    skillsWanted?: StringFilter<"Swap"> | string
    status?: StringFilter<"Swap"> | string
    message?: StringNullableFilter<"Swap"> | string | null
    createdAt?: DateTimeFilter<"Swap"> | Date | string
    updatedAt?: DateTimeFilter<"Swap"> | Date | string
  }

  export type SwapUpsertWithWhereUniqueWithoutReceiverInput = {
    where: SwapWhereUniqueInput
    update: XOR<SwapUpdateWithoutReceiverInput, SwapUncheckedUpdateWithoutReceiverInput>
    create: XOR<SwapCreateWithoutReceiverInput, SwapUncheckedCreateWithoutReceiverInput>
  }

  export type SwapUpdateWithWhereUniqueWithoutReceiverInput = {
    where: SwapWhereUniqueInput
    data: XOR<SwapUpdateWithoutReceiverInput, SwapUncheckedUpdateWithoutReceiverInput>
  }

  export type SwapUpdateManyWithWhereWithoutReceiverInput = {
    where: SwapScalarWhereInput
    data: XOR<SwapUpdateManyMutationInput, SwapUncheckedUpdateManyWithoutReceiverInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    swapId?: IntFilter<"Feedback"> | number
    userId?: IntFilter<"Feedback"> | number
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type UserCreateWithoutSkillsOfferedInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsWanted?: SkillWantedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSkillsOfferedInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsWanted?: SkillWantedUncheckedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapUncheckedCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapUncheckedCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSkillsOfferedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
  }

  export type UserUpsertWithoutSkillsOfferedInput = {
    update: XOR<UserUpdateWithoutSkillsOfferedInput, UserUncheckedUpdateWithoutSkillsOfferedInput>
    create: XOR<UserCreateWithoutSkillsOfferedInput, UserUncheckedCreateWithoutSkillsOfferedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSkillsOfferedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSkillsOfferedInput, UserUncheckedUpdateWithoutSkillsOfferedInput>
  }

  export type UserUpdateWithoutSkillsOfferedInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsWanted?: SkillWantedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsOfferedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsWanted?: SkillWantedUncheckedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUncheckedUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUncheckedUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSkillsWantedInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSkillsWantedInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedUncheckedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapUncheckedCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapUncheckedCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSkillsWantedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
  }

  export type UserUpsertWithoutSkillsWantedInput = {
    update: XOR<UserUpdateWithoutSkillsWantedInput, UserUncheckedUpdateWithoutSkillsWantedInput>
    create: XOR<UserCreateWithoutSkillsWantedInput, UserUncheckedCreateWithoutSkillsWantedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSkillsWantedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSkillsWantedInput, UserUncheckedUpdateWithoutSkillsWantedInput>
  }

  export type UserUpdateWithoutSkillsWantedInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsWantedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUncheckedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUncheckedUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUncheckedUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSwapsRequestedInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedCreateNestedManyWithoutUserInput
    swapsReceived?: SwapCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSwapsRequestedInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedUncheckedCreateNestedManyWithoutUserInput
    swapsReceived?: SwapUncheckedCreateNestedManyWithoutReceiverInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSwapsRequestedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSwapsRequestedInput, UserUncheckedCreateWithoutSwapsRequestedInput>
  }

  export type UserCreateWithoutSwapsReceivedInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapCreateNestedManyWithoutRequesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSwapsReceivedInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedUncheckedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapUncheckedCreateNestedManyWithoutRequesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSwapsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSwapsReceivedInput, UserUncheckedCreateWithoutSwapsReceivedInput>
  }

  export type FeedbackCreateWithoutSwapInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutSwapInput = {
    id?: number
    userId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutSwapInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
  }

  export type UserUpsertWithoutSwapsRequestedInput = {
    update: XOR<UserUpdateWithoutSwapsRequestedInput, UserUncheckedUpdateWithoutSwapsRequestedInput>
    create: XOR<UserCreateWithoutSwapsRequestedInput, UserUncheckedCreateWithoutSwapsRequestedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSwapsRequestedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSwapsRequestedInput, UserUncheckedUpdateWithoutSwapsRequestedInput>
  }

  export type UserUpdateWithoutSwapsRequestedInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUpdateManyWithoutUserNestedInput
    swapsReceived?: SwapUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSwapsRequestedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUncheckedUpdateManyWithoutUserNestedInput
    swapsReceived?: SwapUncheckedUpdateManyWithoutReceiverNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSwapsReceivedInput = {
    update: XOR<UserUpdateWithoutSwapsReceivedInput, UserUncheckedUpdateWithoutSwapsReceivedInput>
    create: XOR<UserCreateWithoutSwapsReceivedInput, UserUncheckedCreateWithoutSwapsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSwapsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSwapsReceivedInput, UserUncheckedUpdateWithoutSwapsReceivedInput>
  }

  export type UserUpdateWithoutSwapsReceivedInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUpdateManyWithoutRequesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSwapsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUncheckedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUncheckedUpdateManyWithoutRequesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedbackUpsertWithoutSwapInput = {
    update: XOR<FeedbackUpdateWithoutSwapInput, FeedbackUncheckedUpdateWithoutSwapInput>
    create: XOR<FeedbackCreateWithoutSwapInput, FeedbackUncheckedCreateWithoutSwapInput>
    where?: FeedbackWhereInput
  }

  export type FeedbackUpdateToOneWithWhereWithoutSwapInput = {
    where?: FeedbackWhereInput
    data: XOR<FeedbackUpdateWithoutSwapInput, FeedbackUncheckedUpdateWithoutSwapInput>
  }

  export type FeedbackUpdateWithoutSwapInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutSwapInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapCreateWithoutFeedbackInput = {
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSwapsRequestedInput
    receiver: UserCreateNestedOneWithoutSwapsReceivedInput
  }

  export type SwapUncheckedCreateWithoutFeedbackInput = {
    id?: number
    requesterId: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SwapCreateOrConnectWithoutFeedbackInput = {
    where: SwapWhereUniqueInput
    create: XOR<SwapCreateWithoutFeedbackInput, SwapUncheckedCreateWithoutFeedbackInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    name: string
    email: string
    password: string
    location?: string | null
    photoUrl?: string | null
    isAdmin?: boolean
    isBanned?: boolean
    isPublic?: boolean
    availability?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsOffered?: SkillOfferedUncheckedCreateNestedManyWithoutUserInput
    skillsWanted?: SkillWantedUncheckedCreateNestedManyWithoutUserInput
    swapsRequested?: SwapUncheckedCreateNestedManyWithoutRequesterInput
    swapsReceived?: SwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type SwapUpsertWithoutFeedbackInput = {
    update: XOR<SwapUpdateWithoutFeedbackInput, SwapUncheckedUpdateWithoutFeedbackInput>
    create: XOR<SwapCreateWithoutFeedbackInput, SwapUncheckedCreateWithoutFeedbackInput>
    where?: SwapWhereInput
  }

  export type SwapUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: SwapWhereInput
    data: XOR<SwapUpdateWithoutFeedbackInput, SwapUncheckedUpdateWithoutFeedbackInput>
  }

  export type SwapUpdateWithoutFeedbackInput = {
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSwapsRequestedNestedInput
    receiver?: UserUpdateOneRequiredWithoutSwapsReceivedNestedInput
  }

  export type SwapUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsOffered?: SkillOfferedUncheckedUpdateManyWithoutUserNestedInput
    skillsWanted?: SkillWantedUncheckedUpdateManyWithoutUserNestedInput
    swapsRequested?: SwapUncheckedUpdateManyWithoutRequesterNestedInput
    swapsReceived?: SwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type SkillOfferedCreateManyUserInput = {
    id?: number
    name: string
  }

  export type SkillWantedCreateManyUserInput = {
    id?: number
    name: string
  }

  export type SwapCreateManyRequesterInput = {
    id?: number
    receiverId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SwapCreateManyReceiverInput = {
    id?: number
    requesterId: number
    skillsOffered: string
    skillsWanted: string
    status: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackCreateManyUserInput = {
    id?: number
    swapId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type SkillOfferedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillOfferedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillOfferedUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillWantedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillWantedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillWantedUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SwapUpdateWithoutRequesterInput = {
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutSwapsReceivedNestedInput
    feedback?: FeedbackUpdateOneWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUncheckedUpdateOneWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateManyWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapUpdateWithoutReceiverInput = {
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSwapsRequestedNestedInput
    feedback?: FeedbackUpdateOneWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUncheckedUpdateOneWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    skillsOffered?: StringFieldUpdateOperationsInput | string
    skillsWanted?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swap?: SwapUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    swapId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    swapId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillOfferedDefaultArgs instead
     */
    export type SkillOfferedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillOfferedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillWantedDefaultArgs instead
     */
    export type SkillWantedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillWantedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SwapDefaultArgs instead
     */
    export type SwapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SwapDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}